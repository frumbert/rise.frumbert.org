__resolveJsonp("course:und","{"course":{"id":"OCserM9GMoBCnAvzTvghrovOJ3v_DnqL","originalId":null,"author":"aid|0f19f4ce-3e63-4470-a4d8-4ddaaa8b3e49","selectedAuthorId":"none","color":"#285f9f","navigationMode":"","sharePassword":"","shareId":"KTIRNkOogiYwRlIZspWWjSP87xHqSHvr","copyOf":"-3PtUDyeZkTnmsDNp8mW5139WXSDYEad","order":"1750133295293","fonts":null,"media":{},"coverImage":null,"lessons":[{"author":"aid|0f19f4ce-3e63-4470-a4d8-4ddaaa8b3e49","courseId":"OCserM9GMoBCnAvzTvghrovOJ3v_DnqL","createdAt":"2025-06-17T03:23:02.698Z","deleted":false,"description":"","duplicatedFromId":"cArdYv4zwqfczYvC8Ri5LXI-y2rAoHNY","experiments":null,"headerImage":{},"icon":"Article","id":"VfaxGNjvThDrslkgzjv3_qLzgnJqVDMg","isPartnerContentAuthor":null,"lastUpdatedBy":"aid|0f19f4ce-3e63-4470-a4d8-4ddaaa8b3e49","media":{},"originalId":null,"piles":[],"position":1,"ready":true,"selectedAuthorId":"none","settings":{},"sourceLessonLocaleId":null,"title":"Carousel","transferredAt":null,"type":"blocks","updatedAt":"2025-06-17T03:24:56.744Z","items":[{"id":"cma4q8q8f03bh3bbsafnl0tay","type":"image","items":[{"id":"cma4q8q8g03bi3bbst5oi9wsr","media":{"image":{"key":"assets/rise/assets/block-defaults/beach.jpg","src":"beach.jpg","type":"image","thumbnail":"https://cdn.articulate.com/assets/rise/assets/block-defaults/beach_thumb.jpg","dimensions":{"originalWidth":1680,"originalHeight":993},"originalUrl":"beach.jpg","sourcedFrom":"DEFAULT"}},"caption":"<div data-editor-id=\"11581cb9-f42f-4c93-90bf-aa30ef062006\"><div data-editor-id=\"cafb2909-fe6b-4796-85f5-14bfceedaabc\"><div data-editor-id=\"67b02616-17e7-4fab-8f72-e6fea79569de\"><p>A row of beach houses along a white sandy beach.</p><p>These houses are colourful but serve no real purpose. We can infer that the water here has no significant wave size.</p></div></div></div>","paragraph":""},{"id":"cma4q8q8g03bj3bbsn5ntgvd1","media":{"image":{"key":"assets/rise/assets/block-defaults/concert.jpg","src":"concert.jpg","type":"image","thumbnail":"https://cdn.articulate.com/assets/rise/assets/block-defaults/concert_thumb.jpg","dimensions":{"originalWidth":1681,"originalHeight":992},"originalUrl":"concert.jpg","sourcedFrom":"DEFAULT"}},"caption":"<div data-editor-id=\"c35d48ae-a448-41bb-841d-233f9de3e9e9\"><p>This person is letting everybody know that they have just returned from a very successful fishing trip.</p></div>"},{"id":"cma4q8q8g03bk3bbs4g3rhlxp","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/By9ryUTpvB0Z65Rc-stock_image.jpg","type":"image","crushedKey":"stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1120},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"aa144de4-00fb-47bc-ac4d-552a67b32c31\"><p>These balloons are actually beside each other; one of them is much smaller than the other.</p></div>"},{"id":"cma4q8q8g03bl3bbsrwfah7ai","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/hFSEbZkG8CtnoXjD-stock_image.jpg","type":"image","crushedKey":"SKrrNU/stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1080},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"87f3c8c1-35d7-4e7a-9ad3-216797dbd1c0\"><div data-editor-id=\"f083eae0-be4d-447c-ac44-1db3881eeb03\"><p>They had to dip half their hand in arsenic paint to retieve this dropped sapling.</p></div></div>"},{"id":"cma4q8q8g03bm3bbsqmpluq9c","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/a_YS3BFhd8C0GAqW-stock_image.jpg","type":"image","crushedKey":"G5Fvt6/stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1121},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"0f4787e9-173d-4b27-90a7-f3e58f2d406a\"><p>A very high shutter speed is needed to capture this stamen.</p></div>"},{"id":"cma4q8q8g03bn3bbs5e0xy0ln","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/-g89vJy4ibs3g-JU-stock_image.jpg","type":"image","crushedKey":"RYZZ1v/stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1051},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"cce89959-4ed0-4d0c-b252-8b578e62a9ea\"><p>Is that Tibochina, Nerium or Bouganvillea?</p></div>"},{"id":"cma4q8q8g03bo3bbsy07wit6k","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/i4leET1W64YllrQm-stock_image.jpg","type":"image","crushedKey":"e3qPAe/stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1120},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"f6a7b262-3d63-422f-a022-5486f6457438\"><div data-editor-id=\"57bc320d-7262-4edb-bd5e-1e32c7033cd7\"><p>In botany, a tree is a perennial plant with an elongated stem, or trunk, usually supporting branches and leaves. In some usages, the definition of a tree may be narrower, including only woody plants with secondary growth, plants that are usable as lumber or plants above a specified height. In wider definitions, the taller palms, tree ferns, bananas, and bamboos are also trees. <a href=\"https://en.wikipedia.org/wiki/Tree\" rel=\"noopener noreferrer\" target=\"_blank\">Wikipedia</a></p></div></div>"},{"id":"cma4q8q8g03bp3bbs5ci9fh0p","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/z99XKRM3o0xmnTlE-stock_image.jpg","type":"image","crushedKey":"QzAX_H/stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1120},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"38b27087-6679-4ca8-95ec-ddad4c1897c4\"><div data-editor-id=\"d0ea8fe5-76f2-4d02-a424-13d8a0141c7a\"><p>It would appear that somebody has dropped their camera. Luckily, unline that time I dropped mine off a waterfall, it appears to have survived the incident. Perhaps not for very long, given its position. <em>Go, hurry</em>, grab that camera!</p></div></div>"},{"id":"cma4q8q8g03bq3bbs2bach5bw","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/w72xV6dKabexqZOk-stock_image.jpg","type":"image","crushedKey":"IhjSxY/stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1120},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"52f867cb-6685-475b-a889-df9869c85397\"><p>Fun: Yes. Edible: No.</p></div>"},{"id":"cma4q8q8g03br3bbse3lg9lg2","media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/c7afyoTLDh2NfNhA-stock_image.jpg","type":"image","crushedKey":"zqcjZ2/stock-image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1155},"originalUrl":"stock-image.jpg","useCrushedKey":true}},"caption":"<div data-editor-id=\"e193d903-41c2-4f21-9f65-3c70e166e431\"><div data-editor-id=\"73ad5833-ab27-4160-8a4c-2267ea14a3f2\"><p>Who stole my pots?</p></div></div>","isNewlyInserted":true}],"family":"gallery","variant":"centered","settings":{"v":2,"cardMode":"WHITE","paddingTop":3,"accentColor":null,"zoomOnClick":true,"quotesInline":false,"isCustomColor":true,"paddingBottom":3,"paddingLinked":true,"backgroundType":"LIGHT","backgroundColor":null,"entranceAnimation":true,"markerColorContrast":"AUTO","snippetColorContrast":"AUTO","customBackgroundColorContrast":"AUTO"},"background":{}}]}],"jobs":[],"labelSetId":"","deleted":false,"createdAt":"2025-06-17T03:23:01.269Z","updatedAt":"2025-06-17T04:08:15.293Z","markComplete":false,"isDefault":false,"ready":true,"reviewId":"","exportSettings":{"title":"ImageFX","format":"zip","quizId":null,"target":"scorm12","shareId":"MRkuprXWt4sc0x7QMY3tzLx30UAz5kIl","activeLMS":0,"reporting":"passed-incomplete","exportType":"lms","identifier":"OCserM9GMoBCnAvzTvghrovOJ3v_DnqL_rise","targetName":"SCORM 1.2","storylineId":null,"completeWith":"reporting","isTranslated":false,"quizComplete":false,"activeEdition":0,"disableCoverPage":true,"enableExitCourse":false,"resetLearnerData":false,"updateResumeData":true,"storylineComplete":false,"localesPackageType":"single","completionPercentage":100,"translationModelVersion":null},"headingTypefaceId":"WcvJTNMavwpiNB2QEnMQPseNDATGXiI9","bodyTypefaceId":"-MPEM2R_v3eTh0hQInNv-2WAwVwql-Pw","uiTypefaceId":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","sidebarMode":"open","tenantId":"c8881c34-ec05-4f21-b0df-b604800138f5","showLessonCount":true,"showNavigationButtons":true,"allowSearch":true,"animateBlockEntrance":true,"transferredAt":null,"allowCopy":false,"enableVideoPlaybackSpeed":null,"jobType":null,"partnerContentId":null,"cardImage":{},"theme":{"themeId":"imaginative","mightyMods":[{"data":{"border":"4px","fontSize":12,"dropShadow":"large","labelColor":"#000000","borderColor":"#FF8503","labelCasing":"uppercase","borderRadius":"32","letterSpacing":0,"buttonLocation":"belowTableOfContents","buttonPosition":"fullWidth","backgroundColor":"#FFFFFF"},"tagName":"mighty-rise-theme-mod-begin-button"}],"navigation":false,"showAuthor":false,"allowSearch":true,"colorAccent":"#285f9f","blockCorners":"ROUNDED","buttonScheme":"LIGHT","uiTypefaceId":"_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3","coverPageType":"CENTERED","accentContrast":"AUTO","bodyTypefaceId":"Wstu1lVkR_rUsAuU6x1N_UImwchzygj2","mightyPowerups":[{"data":{"hideCoverPage":true},"tagName":"mighty-powerup-web-publish-settings"},{"data":{"customCss":null,"customJavascript":"(async () => {\n    window.__MODLOADER__ = window.__MODLOADER__ || {};\n\n    const MODS = [\n        { block: \"cma4q8q8f03bh3bbsafnl0tay\", fn: Carousel, called: false },\n    ];\n\n    class FrumbertCarousel {\n        constructor(sliderId, config) {\n            this.slider = sliderId instanceof HTMLElement ? sliderId : document.getElementById(sliderId);\n            this.slides = this.slider.querySelectorAll('figure');\n            this.config = Object.assign({\n                maxRows: 8,\n                maxCols: 10,\n                interval: 100,\n                fadeDuration: 600,\n                patterns: ['squares', 'vbeams', 'hbeams', 'fade', 'rando'],\n                previous: undefined,\n                next: undefined,\n                zoom: false,\n                dots: undefined,\n                dotShapes: {\n                    current: \"M512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256zM256 48C141.1 48 48 141.1 48 256C48 370.9 141.1 464 256 464C370.9 464 464 370.9 464 256C464 141.1 370.9 48 256 48z\",\n                    other: \"M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512z\"\n                }\n            }, config);\n\n            this.current = 0;\n            [this.rows, this.cols] = [this.config.maxRows, this.config.maxCols];\n\n            this.init();\n        }\n\n        zoomContent(slide, index) {\n            const sw = 920;\n            const sh = (sw / parseFloat(slide.dataset.w) * parseFloat(slide.dataset.h)).toFixed();\n            return `<img src='data:image/gif;base64,R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==' width='${sw}' height='${sh}' data-src='${slide.dataset.src}'>`;\n        }\n\n        // replicate the internal image zoom control\n        zoomOverlay(e) {\n            const src = e.target.dataset.src;\n            const control = `url('data:image/svg+xml,<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fal\" data-icon=\"arrow-up-right-and-arrow-down-left-from-center\" class=\"svg-inline--fa fa-arrow-up-right-and-arrow-down-left-from-center \" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M496 0h-160C327.2 0 320 7.156 320 16S327.2 32 336 32h121.4l-164.7 164.7c-6.25 6.25-6.25 16.38 0 22.62s16.38 6.25 22.62 0L480 54.63V176C480 184.8 487.2 192 496 192S512 184.8 512 176v-160C512 7.156 504.8 0 496 0zM196.7 292.7L32 457.4V336C32 327.2 24.84 320 16 320S0 327.2 0 336v160C0 504.8 7.156 512 16 512h160C184.8 512 192 504.8 192 496S184.8 480 176 480H54.63l164.7-164.7c6.25-6.25 6.25-16.38 0-22.62S202.9 286.4 196.7 292.7z\"></path></svg>')`;\n            const dialog = document.createElement('dialog');\n            const clone = e.target.cloneNode(false);\n            const style = document.createElement('style');\n            style.textContent = `\n                dialog { padding: 0; border: 0; display: flex; align-items: center; justify-content: center; position: relative; border-radius: 1rem; box-shadow: 0 1rem 2rem #0000003f; }\n                dialog::backdrop { background-color: white; background-repeat: no-repeat; background-image: ${control}; background-position: top 2rem right 2rem; background-size: 2rem; }\n            `;\n            document.body.appendChild(style);\n            clone.removeAttribute('width');\n            clone.removeAttribute('height');\n            clone.src = clone.dataset.src;\n            clone.style.width = '100%';\n            clone.style.cursor = 'zoom-out';\n            dialog.appendChild(clone);\n            document.body.appendChild(dialog);\n            dialog.addEventListener('close', (event) => { dialog.remove(); style.remove(); });\n            dialog.addEventListener('click', (event) => { dialog.close('click'); });\n            dialog.showModal();\n        }\n\n        init() {\n            // ensure supporting css exists\n            if (!document.querySelector(`style[frumbert-carousel]`)) { // only needs one instance\n                const cssTag = document.createElement('style');\n                cssTag.setAttribute('frumbert-carousel', !0);\n                cssTag.textContent = `div[frumbert-carousel]{\n                  *{box-sizing: border-box;}\n                  position:relative;width:100%;overflow:hidden;\n                  figure.slide {\n                    margin-block-start:0;margin-block-end:0;margin-inline-start:0;margin-inline-end:0;margin:0;padding:0;\n                    position:absolute;width:100%;height:100%;background-size:cover;background-position:center;opacity:0;z-index:1;pointer-events:none;\n                    transition:box-shadow .5s linear;overflow:hidden;\n                    figcaption {\n                      position:absolute;bottom:1rem;left:1rem;width:auto;\n                      em{font-style:italic;}\n                      strong{font-weight:bold}\n                      &:not(:empty) {\n                        background-color:var(--bg);backdrop-filter:blur(.5rem);color:var(--fg);padding:1rem;max-width:50%;border-radius:.5rem\n                      }\n                    }\n                    &.active {\n                      box-shadow:0 0 2rem var(--bg);opacity:1;pointer-events:auto\n                    }\n                    img {\n                      cursor:zoom-in;\n                      max-width:100%;\n                    }\n                  }\n                  .slice{\n                    position:absolute;opacity:0;background-repeat:no-repeat;pointer-events:none;z-index:2\n                  }\n                  .slide,.slice{\n                    will-change:opacity,transform\n                  }\n                }\n                .carousel-slides{transition:all .5s ease-in-out;}`;\n                document.body.appendChild(cssTag);\n            }\n            this.slider.closest('div[data-block-id]').setAttribute('frumbert-carousel', !0);\n\n            // Initialize slides - create anew to avoid rise bindings\n            this.slides.forEach((slide, i) => {\n                const div = slide.parentNode;\n                const figure = document.createElement('figure');\n                const img = slide.querySelector('img');\n                if (slide.querySelector('figcaption')) {\n                    const caption = document.createElement('figcaption');\n                    caption.innerHTML = slide.querySelector('figcaption').querySelector('p')?.parentNode?.innerHTML || '';\n                    figure.appendChild(caption);\n                }\n                for (const attr of div.attributes) figure.setAttribute(attr.name, attr.value);\n                figure.removeAttribute('class');\n                figure.removeAttribute('hidden');\n                figure.removeAttribute('inert');\n                figure.classList.add('slide');\n                figure.dataset.src = img.src;\n                figure.dataset.w = img.width;\n                figure.dataset.h = img.height;\n                this.slider.appendChild(figure);\n                if (i === 0) {\n                    figure.classList.add('active');\n                    this.adjustSliderHeight(figure);\n                }\n                this._getAverageColour(figure.dataset.src).then((c) => {\n                    figure.style.setProperty('--bg', c.average);\n                    figure.style.setProperty('--fg', c.contrast);\n                }).catch(err => console.warn);\n                if (this.config.zoom) {\n                    figure.insertAdjacentHTML('afterbegin', this.zoomContent(figure, i)); // creates the transparent dummy image\n                    figure.querySelector('img').addEventListener('click', this.zoomOverlay);\n                }\n                slide.remove();\n            });\n            Array.from(this.slider.querySelectorAll('div')).forEach((el) => { el.remove() });\n\n            this.slides = this.slider.querySelectorAll('figure'); // same name, different dom nodes\n\n            // Consume event listeners for navigation buttons\n            [this.config.previous, this.config.next].forEach((el, index) => {\n                if (el instanceof HTMLElement) {\n                    el.addEventListener('click', (e) => { e.stopPropagation(); e.preventDefault(); this.showNextSlide(index === 0 ? -1 : 1) });\n                }\n            })\n\n            // Recalculate height on window resize\n            window.addEventListener('resize', () => {\n                this.adjustSliderHeight(this.slides[this.current]);\n            });\n        }\n\n        adjustSliderHeight(slideElement) {\n            if (slideElement.dataset.src) {\n                slideElement.style.backgroundImage = `url('${slideElement.dataset.src}')`;\n            }\n            if (slideElement.dataset.w && slideElement.dataset.h) {\n                const aspectRatio = parseFloat(slideElement.dataset.h) / parseFloat(slideElement.dataset.w);\n                const containerWidth = this.slider.offsetWidth;\n                this.slider.style.height = `${containerWidth * aspectRatio}px`;\n            } else {\n                const src = slideElement.getAttribute('data-src');\n                const img = new Image();\n                img.onload = () => {\n                    const aspectRatio = img.naturalHeight / img.naturalWidth;\n                    const containerWidth = this.slider.offsetWidth;\n                    this.slider.style.height = `${containerWidth * aspectRatio}px`;\n                };\n                img.src = src;\n            }\n        }\n\n        createSlice(data, width, height, left, top, delay, shape) {\n            const slice = document.createElement('div');\n            slice.className = `slice ${shape}`;\n            slice.style.width = `${width}px`;\n            slice.style.height = `${height}px`;\n            slice.style.left = `${left}px`;\n            slice.style.top = `${top}px`;\n            slice.style.backgroundImage = `url('${data.nextImageURL}')`;\n            slice.style.backgroundSize = `${data.sliderWidth}px ${data.sliderHeight}px`;\n            slice.style.backgroundPosition = `-${left}px -${top}px`;\n            return { el: slice, delay };\n        }\n\n        shuffle(array) {\n            for (let i = array.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [array[i], array[j]] = [array[j], array[i]];\n            }\n            return array;\n        }\n\n        rando(data) {\n            let ar = this.squares(data);\n            let delays = ar[0].map(item => item.delay);\n            this.shuffle(delays);\n            ar[0].forEach((item, index) => {\n                item.delay = delays[index];\n            });\n            return ar;\n        }\n\n        squares(data) {\n            const slices = [];\n            for (let r = 0; r < this.rows; r++) {\n                for (let c = 0; c < this.cols; c++) {\n                    const delay = data.reversed ? (this.rows - 1 - r + this.cols - 1 - c) * this.config.interval : (r + c) * this.config.interval;\n                    slices.push(this.createSlice(data, data.sliceWidth, data.sliceHeight, c * data.sliceWidth, r * data.sliceHeight, delay, 'square'));\n                }\n            }\n            const maxDelay = (this.rows + this.cols - 2) * this.config.interval + this.config.fadeDuration;\n            return [slices, maxDelay];\n        }\n\n        vbeams(data) {\n            const slices = [];\n            for (let c = 0; c < this.cols; c++) {\n                const delay = data.reversed ? (this.cols - 1 - c) * this.config.interval : c * this.config.interval;\n                slices.push(this.createSlice(data, data.sliceWidth, data.sliderHeight, c * data.sliceWidth, 0, delay, 'vbeam'));\n            }\n            const maxDelay = (this.cols - 2) * this.config.interval + this.config.fadeDuration;\n            return [slices, maxDelay];\n        }\n\n        hbeams(data) {\n            const slices = [];\n            for (let r = 0; r < this.rows; r++) {\n                const delay = data.reversed ? (this.rows - 1 - r) * this.config.interval : r * this.config.interval;\n                slices.push(this.createSlice(data, data.sliderWidth, data.sliceHeight, 0, r * data.sliceHeight, delay, 'hbeam'));\n            }\n            const maxDelay = (this.rows - 2) * this.config.interval + this.config.fadeDuration;\n            return [slices, maxDelay];\n        }\n\n        fade(data) {\n            const slices = [];\n            slices.push(this.createSlice(data, data.sliderWidth, data.sliderHeight, 0, 0, this.config.interval, 'fade'));\n            const maxDelay = this.config.interval + this.config.fadeDuration;\n            return [slices, maxDelay];\n        }\n\n        showNextSlide(n) {\n            const prev = this.current;\n\n            // Increment in positive/negative direction, looping\n            this.current = (this.current + ~~n) % this.slides.length;\n            if (this.current < 0) this.current = this.slides.length - 1;\n\n            // Pick a random number of divisions\n            this.rows = Math.floor(Math.random() * (this.config.maxRows - 2)) + 2;\n            this.cols = Math.floor(Math.random() * (this.config.maxCols - 2)) + 2;\n\n            const currentSlide = this.slides[prev];\n            const nextSlide = this.slides[this.current];\n            const sliderWidth = this.slider.clientWidth;\n            const sliderHeight = this.slider.clientHeight;\n            const data = {\n                sliderWidth,\n                sliderHeight,\n                sliceWidth: (sliderWidth / this.cols).toFixed(),\n                sliceHeight: (sliderHeight / this.rows).toFixed(),\n                nextImageURL: nextSlide.getAttribute('data-src'),\n                reversed: Math.random() < 0.5\n            };\n\n            // Create a mapping of pattern names to their corresponding functions\n            const patternFunctions = {\n                squares: this.squares.bind(this),\n                vbeams: this.vbeams.bind(this),\n                hbeams: this.hbeams.bind(this),\n                fade: this.fade.bind(this),\n                rando: this.rando.bind(this)\n            };\n\n            // Validate config.patterns against patternFunctions\n            const validPatterns = this.config.patterns.filter(pattern => patternFunctions[pattern]);\n\n            // Select a random pattern and call the corresponding function\n            const randomPattern = validPatterns[Math.floor(Math.random() * validPatterns.length)];\n            const [transitionUnits, maxDelay] = patternFunctions[randomPattern](data);\n\n            // Render the transition\n            for (const slide of transitionUnits) {\n                this.slider.appendChild(slide.el);\n                setTimeout(() => {\n                    slide.el.style.transition = `opacity ${this.config.fadeDuration}ms ease`;\n                    slide.el.style.opacity = 1;\n                }, slide.delay);\n            }\n\n            // Cleanup the transition and prepare for the next slide\n            setTimeout(() => {\n                nextSlide.classList.add('active');\n                this.updateDots();\n\n                // Hide current slide\n                currentSlide.style.transition = 'none';\n                currentSlide.classList.remove('active');\n                currentSlide.offsetHeight; // Force reflow\n                currentSlide.style.transition = '';\n\n                transitionUnits.forEach(slice => {\n                    slice.el.remove();\n                });\n                this.adjustSliderHeight(nextSlide);\n            }, maxDelay);\n        }\n\n        updateDots() {\n            if (!this.config.dots) return;\n            this.config.dots.closest('.carousel').style.setProperty('--carousel-active-index', this.current);\n            this.config.dots.querySelectorAll('path').forEach((el, index) => {\n                el.setAttribute('d', index === this.current ? this.config.dotShapes.current : this.config.dotShapes.other);\n            });\n        }\n\n        async _getAverageColour(src) {\n            return new Promise((resolve, reject) => {\n                const imgEl = new Image();\n                const defaultValue = {\n                    average: \"#7f7f7f7f\",\n                    contrast: 'black'\n                };\n                imgEl.onerror = () => resolve(defaultValue);\n                imgEl.onload = function () {\n                    let blockSize = 32,\n                        canvas = document.createElement('canvas'),\n                        context = canvas.getContext && canvas.getContext('2d'),\n                        i = -4,\n                        rgb = { r: 0, g: 0, b: 0 },\n                        count = 0,\n                        contrast = 'black',\n                        pixels = null,\n                        brightness = 0;\n\n                    if (!context) resolve(defaultValue);\n                    canvas.width = imgEl.naturalWidth || imgEl.offsetWidth;\n                    canvas.height = imgEl.naturalHeight || imgEl.offsetHeight;\n                    context.drawImage(imgEl, 0, 0);\n                    try {\n                        pixels = context.getImageData(0, 0, canvas.width, canvas.height);\n                    } catch (e) {\n                        return resolve(defaultValue);\n                    }\n                    if (!pixels?.data) return resolve(defaultValue);\n                    // console.trace(pixels);\n                    while ((i += blockSize * 4) < pixels.data.length) {\n                        ++count;\n                        rgb.r += pixels.data[i];\n                        rgb.g += pixels.data[i + 1];\n                        rgb.b += pixels.data[i + 2];\n                    }\n                    brightness = (Math.max(0, Math.min(255, parseInt(~~(rgb.r / count), 10))) * 299) +\n                        (Math.max(0, Math.min(255, parseInt(~~(rgb.g / count), 10))) * 587) +\n                        (Math.max(0, Math.min(255, parseInt(~~(rgb.b / count), 10))) * 114);\n                    brightness = brightness / 255000;\n                    contrast = brightness >= 0.5 ? 'black' : 'white';\n                    resolve({\n                        average: `#${[\n                            (\"0\" + Math.max(0, Math.min(255, parseInt(~~(rgb.r / count), 10))).toString(16)).substr(-2),\n                            (\"0\" + Math.max(0, Math.min(255, parseInt(~~(rgb.g / count), 10))).toString(16)).substr(-2),\n                            (\"0\" + Math.max(0, Math.min(255, parseInt(~~(rgb.b / count), 10))).toString(16)).substr(-2),\n                            '3f'\n                        ].join(\"\")}`,\n                        contrast\n                    });\n                };\n                imgEl.src = src;\n            });\n        }\n    }\n\n    function Carousel(node, blockData) {\n\n        const block = node.closest('div[data-block-id]');\n        if (block.hasAttribute('frumbert-carousel') || node.classList.contains('sparkle-fountain')) return;\n        if (blockData.family !== 'gallery') return;\n\n        // we like the dots but they are bound to scripts which don't work here - recreating them breaks the binding\n        const dots = node.querySelector('.carousel-controls-items'); if (dots) {\n            const cci = dots.cloneNode(true);\n            const p = dots.parentNode;\n            p.appendChild(cci);\n            dots.remove();\n        }\n\n        // Here's a thing. RISE does not create <figcaption> elements inside the <figure> until slightly before the slide is rendered. Because 🤷🏼\n        // So we need the blockData just to get the captions, and write them ourselves.\n        const container = node.querySelector('.carousel-slides');\n        const figures = container.querySelectorAll('figure');\n        for (let i = 0; i < figures.length; i++) {\n            const fc = document.createElement('figcaption');\n            fc.innerHTML = blockData.items[i].caption;\n            if (fc.textContent.length > 0) {\n                figures[i].appendChild(fc);\n            }\n        }\n\n        const fbc = new FrumbertCarousel(container, {\n            previous: node.querySelector('button.carousel-controls-prev'),\n            next: node.querySelector('button.carousel-controls-next'),\n            zoom: blockData.settings.zoomOnClick,\n            dots: block.querySelector('.carousel-controls-items')\n        });\n    }\n\n    function RunMods(blockData) {\n        MODS.forEach((mod) => {\n            if (!mod.called) {\n                if (mod.block) mod.match = `div[data-block-id='${mod.block}']`;\n                const node = document.querySelector(mod.match);\n                if (mod.once) {\n                    mod.fn(node, blockData);\n                    mod.called = true;\n                    return;\n                } else if (node && mod.block && mod.block === blockData.id) {\n                    mod.fn(node, blockData);\n                    mod.called = true;\n                } else if (node && !mod.block) {\n                    mod.fn(node);\n                    mod.called = true;\n                }\n            }\n        });\n    }\n\n    if (!window.__MODLOADER__.getRiseStateStore) {\n        window.__MODLOADER__.getRiseStateStore = () => {\n            return new Promise((resolve) => {\n                const app = document.querySelector(\"#app\");\n                const interval = setInterval(() => {\n                    const key = Object.keys(app)\n                        .filter((keyName) =>\n                            keyName.includes(\"__reactContainer\")\n                        )\n                        .pop();\n                    if (key) {\n                        clearInterval(interval);\n                        const traverse = (element) => {\n                            const store =\n                                element?.memoizedState?.element?.props?.store ||\n                                element?.pendingProps?.store ||\n                                element?.stateNode?.store;\n                            if (store) {\n                                resolve(store);\n                            }\n                            if (element.child) {\n                                traverse(element.child);\n                            }\n                        };\n                        const internalRoot = app[key];\n                        traverse(internalRoot);\n                    }\n                }, 100);\n            });\n        };\n    }\n    const store = await window.__MODLOADER__.getRiseStateStore();\n    store.subscribe(() => {\n        const state = store.getState();\n        const id = state?.courseProgress?.currentLesson || location.href.split('/').pop();\n        if (state && id) {\n            const lesson = state.course.lessons.filter((el) => { return el.id === id });\n            if (lesson && lesson[0]) {\n                for (const block of lesson[0].items) {\n                    RunMods(block);\n                }\n            }\n        }\n    });\n})();"},"tagName":"mighty-powerup-custom-code"}],"navigationType":"SIDEBAR","blockPaddingTop":25,"coverImageAlpha":50,"navigationStyle":"LIGHT","showLessonCount":false,"lessonHeaderSize":"SMALL","buttonInlineStyle":"SQUARED","coverImageDefault":"https://cdn.articulate.com/assets/rise/assets/themes/classic/cover-image/18_abstract.jpg","headingTypefaceId":"_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3","hideLessonHeaders":true,"lessonHeaderColor":null,"lessonHeaderStyle":"LIGHT","sidebarStartsOpen":true,"blockPaddingBottom":25,"markLessonsComplete":false,"animateBlockEntrance":false,"navigationRestricted":false,"buttonNavigationStyle":"FULL","showNavigationButtons":false,"compactShowLessonCount":true,"lessonHeaderImageAlpha":0.2,"lessonHeaderImageColor":"DARK","enableVideoPlaybackSpeed":false,"customColorLessonHeaderContrast":"AUTO"},"lessonHeaderImage":{"media":{"image":{"key":"rise/courses/OCserM9GMoBCnAvzTvghrovOJ3v_DnqL/zi0gekxXrrD9IaP9-stock_image.jpg","dimensions":{"originalWidth":1680,"originalHeight":1259},"originalUrl":"stock-image.jpg","sourcedFrom":"LIBRARY","useCrushedKey":true}}},"overlayNavigationImage":{},"type":null,"locale":null,"sourceCourseLocaleId":null,"experiments":null,"settings":{},"description":"","title":"Carousel","defaultLocaleId":null,"features":{"rise-course-navigation":true,"rise-process-accessibility":true,"rise-matching-accessibility":true,"rise-block-controls-phase-four":true},"authors":[{"id":"aid|0f19f4ce-3e63-4470-a4d8-4ddaaa8b3e49","authorName":"Tim St. Clair"}],"mondrian":{},"bodyTypeface":"DM Sans","headingTypeface":"Oswald","uiTypeface":"Montserrat","lmsOptions":{"enableExitCourse":false,"disableCoverPage":true}},"labelSet":{"id":"cXo5NdidOSItYUQ2Ul0CjZ2M","author":"aid|0f19f4ce-3e63-4470-a4d8-4ddaaa8b3e49","name":"English","defaultId":1,"defaultSet":true,"labels":{"a11yAnswerLive":"Your answer","a11yAuthorPrefix":"By","a11yBlockChartBar":"Bar chart","a11yBlockChartLine":"Line chart","a11yBlockChartPie":"Pie chart","a11yBlockCode":"Code","a11yBlockEmbed":"Embedded Content","a11yBlockFlashcardBack":"Back of card","a11yBlockFlashcardFront":"Front of card","a11yBlockFlashcardGrid":"Flashcard grid","a11yBlockFlashcardStack":"Flashcard carousel","a11yBlockFlashcardStackRoleDescription":"Carousel","a11yBlockFlashcardStackSlideControls":"Slide controls","a11yBlockFlashcardStackSlideControlsGoToNext":"Go to next slide","a11yBlockFlashcardStackSlideControlsGoToPrevious":"Go to previous slide","a11yBlockFlashcardStackSlideControlsGoToSlide":"Go to slide","a11yBlockFlashcardStackSlidePreposition":"of","a11yBlockFlashcardStackSlideRoleDescription":"Slide","a11yBlockImageCarousel":"Image Carousel","a11yBlockImageCarouselRoleDescription":"Carousel","a11yBlockImageCarouselSlideControls":"Slide controls","a11yBlockImageCarouselSlideControlsGoToNext":"Go to next slide","a11yBlockImageCarouselSlideControlsGoToPrevious":"Go to previous slide","a11yBlockImageCarouselSlideControlsGoToSlide":"Go to slide","a11yBlockImageCarouselSlidePreposition":"of","a11yBlockImageCarouselSlideRoleDescription":"Slide","a11yBlockKnowledgeCheck":"Knowledge check","a11yBlockKnowledgeCheckFIB":"Knowledge check: Fill in the blank","a11yBlockKnowledgeCheckM":"Knowledge check: Matching","a11yBlockKnowledgeCheckMC":"Knowledge check: Multiple choice","a11yBlockKnowledgeCheckMR":"Knowledge check: Multiple response","a11yBlockProcessCarousel":"Carousel","a11yBlockProcessRoleDescription":"Carousel","a11yBlockProcessSlideControls":"Slide controls","a11yBlockProcessSlideControlsGoToNext":"Go to next slide","a11yBlockProcessSlideControlsGoToPrevious":"Go to previous slide","a11yBlockProcessSlideControlsGoToSlide":"Go to slide","a11yBlockProcessSlideControlsIntroduction":"Introduction","a11yBlockProcessSlideControlsSummary":"Summary","a11yBlockProcessSlidePreposition":"of","a11yBlockProcessSlideRoleDescription":"Slide","a11yBlockQuoteCarousel":"Quote Carousel","a11yBlockQuoteCarouselRoleDescription":"Carousel","a11yBlockQuoteCarouselSlideControls":"Slide controls","a11yBlockQuoteCarouselSlideControlsGoToNext":"Go to next slide","a11yBlockQuoteCarouselSlideControlsGoToPrevious":"Go to previous slide","a11yBlockQuoteCarouselSlideControlsGoToSlide":"Go to slide","a11yBlockQuoteCarouselSlidePreposition":"of","a11yBlockQuoteCarouselSlideRoleDescription":"Slide","a11yBlockStoryline":"Storyline","a11yBlockTimeline":"Timeline","a11yCarouselNext":"Next","a11yCarouselPrevious":"Previous","a11yCertificateDownloadFailed":"Failed to download certificate","a11yCorrectLive":"Correct answer","a11yCoverCourseCompleted":"Course Completed","a11yCoverCourseLength":"Course Length","a11yCoverRequirementComplete":"Requirement complete","a11yCoverRequirementFailed":"Requirement failed","a11yCoverRequirementIncomplete":"Requirement incomplete","a11yExcelIcon":"Microsoft Excel spreadsheet","a11yFileIcon":"File","a11yGroupAudioPlayer":"Audio player","a11yGroupScenario":"Interactive scenario","a11yGroupVideoPlayer":"Video player","a11yLabeledGraphicBlock":"Labeled graphic","a11yLabeledGraphicButtonMarker":"Marker","a11yLabeledGraphicIconArrowDown":"Down arrow","a11yLabeledGraphicIconArrowDownLeft":"Down left arrow","a11yLabeledGraphicIconArrowDownRight":"Down right arrow","a11yLabeledGraphicIconArrowLeft":"Left arrow","a11yLabeledGraphicIconArrowRight":"Right arrow","a11yLabeledGraphicIconArrowUp":"Up arrow","a11yLabeledGraphicIconArrowUpLeft":"Up left arrow","a11yLabeledGraphicIconArrowUpRight":"Up right arrow","a11yLabeledGraphicIconCheck":"Check mark","a11yLabeledGraphicIconDot":"Dot","a11yLabeledGraphicIconHeart":"Heart","a11yLabeledGraphicIconInformation":"Information","a11yLabeledGraphicIconPin":"Map pin","a11yLabeledGraphicIconPlus":"Plus","a11yLabeledGraphicIconQuestion":"Question mark","a11yLabeledGraphicIconX":"X","a11yLabeledGraphicUnviewed":"Not viewed","a11yLabeledGraphicViewed":"Viewed","a11yMatchingColumn1":"Matching column 1","a11yMatchingColumn2":"Matching column 2","a11yMatchingItemMatchWith":"Match with","a11yMatchingItemMatchedWith":"Matched with","a11yMatchingItemSelectableItem":"Selectable item","a11yMatchingItemShowLess":"Show less","a11yMatchingItemShowMore":"Show more","a11yMediaPause":"Pause","a11yMediaPlay":"Play","a11yMediaSeek":"Seek","a11yNavigationMenuClose":"Close navigation menu","a11yNavigationMenuOpen":"Open navigation menu","a11yNoticeLinkNewTab":"(opens in a new tab)","a11yPageMarker":"Top of page","a11yPDFIcon":"PDF file","a11yPPTIcon":"PowerPoint presentation","a11yProgressSummaryRequirementCompleted":"Requirement completed, check mark","a11yProgressSummaryRequirementNotCompleted":"Requirement not completed, empty square","a11yQuizFailed":"Failed","a11yQuizFeedback":"Feedback","a11yQuizPassed":"Passed","a11yQuizReviewCorrectlyChecked":"Correctly checked","a11yQuizReviewCorrectlySelected":"Correctly selected","a11yQuizReviewCorrectlyUnchecked":"Correctly unchecked","a11yQuizReviewCorrectlyUnselected":"Correctly unselected","a11yQuizReviewIncorrectlyChecked":"Incorrectly checked","a11yQuizReviewIncorrectlySelected":"Incorrectly selected","a11yQuizReviewIncorrectlyUnchecked":"Incorrectly unchecked","a11yQuizReviewIncorrectlyUnselected":"Incorrectly unselected","a11yRegionMainLesson":"Lesson content","a11yRegionMainOverview":"Course overview","a11yRegionNavLesson":"Navigation menu","a11yRegionNavOverview":"Table of contents","a11yRestrictedNav":"This lesson is currently unavailable","a11yRTFIcon":"Rich Text File","a11ySearchClose":"Close search menu","a11ySearchInput":"Search","a11ySearchInputClear":"clear search term","a11ySearchOpen":"Open search menu","a11yStatusAdditionalContent":"Additional content has been loaded","a11yStatusContinued":"Continued","a11yUnzoomImage":"Unzoom image","a11yWordIcon":"Microsoft Word document","a11yZipIcon":"Zip file","a11yZoomImage":"Zoom image","blocksClickToFlip":"Click to flip","blocksPreposition":"of","certificateDownload":"Download certificate","certificateDownloadInProgress":"Downloading...","certificateRetryDownload":"Retry download","courseExit":"EXIT COURSE","courseFinish":"Finish","courseHome":"Home","courseResume":"RESUME COURSE","courseSkipToLesson":"SKIP TO LESSON","courseStart":"START COURSE","coverCompleteAllLessons":"Complete all lessons in this course","coverCompleted":"Completed","coverCompleteLessonsInCourse":"lessons in this course","coverCompleteLessonsName":"Complete","coverCompleteLessonsPreposition":"of","coverCourseRequirements":"Course Requirements","coverHour":"Hour","coverHours":"Hours","coverLesson":"Lesson","coverLessons":"Lessons","coverMinute":"Minute","coverMinutes":"Minutes","coverNoAttemptsRemaining":"No attempts remaining","coverPublished":"Published","coverQuizPercentOrHigher":"% or higher","coverQuizScoreOf":"Score of","curtainLoading":"Your content is loading.","curtainOffline":"Your computer is offline.","curtainOfflineReconnecting":"Attempting to reconnect…","curtainSessionTimedOut":"Your session has timed out.","curtainSessionTimedOutRefresh":"Refresh","curtainSessionTimedOutRestart":"Click refresh to restart your session.","curtainSomethingWrong":"Something went wrong.","curtainSomethingWrongRefresh":"Refresh","curtainSomethingWrongTryAgain":"Click to refresh and try again.","embedLinkGroup":"Embedded web content","embedPlayerGroup":"Embedded media player","embedReadMore":"Read more","embedViewOn":"VIEW ON","exitMessage":"🆇 Press Get Certificate to continue","knowledgeCheckCorrectAnswerRequiredBlock":"Requires a correct answer to continue","knowledgeCheckCorrectAnswerRequiredNav":"Complete previous knowledge checks to unlock this lesson","knowledgeCheckMaxRetriesReached":"You have reached the maximum amount of retries.","knowledgeCheckRetriesAttemptsRemaining":"Attempts remaining:","l10nChooseLanguage":"Choose your course language","l10nChooseLanguageContinue":"Continue","labeledGraphicMarkerLabel":"Labeled graphic marker","lessonComplete":"COMPLETE","lessonName":"","lessonPreposition":"of","lessonRestricted":"Pages must be completed in order","noResults":"No results for","numberedDividerGroup":"Numbered divider","overviewPageTitleSuffix":"Overview","pauseButtonLabel":"Pause","playButtonLabel":"Play","processComplete":"","processLandmark":"Process","processLessonName":"","processNextStep":" ","processStart":" ","processStartAgain":"","processStepName":"","processStepPreposition":"of","processSwipe":"Swipe to continue","progressPieClickToComplete":"Click to complete","progressPieClickToReset":"Click to reset","progressPieCompleted":"Completed","progressPieQuizFailed":"Failed","progressPieUnstarted":"Unstarted","progressSummary":"Progress Summary","progressSummaryBackToLearning":"Back to my learning","progressSummaryCompleted":"Completed:","progressSummaryCompletionRequirement":"Completion Requirement","progressSummaryCongratulations":"Congratulations!","progressSummaryNextUp":"Next up","progressSummaryNoAttemptsRemaining":"No attempts remaining.","progressSummaryNoTitle":"(No Title)","progressSummaryPercentComplete":"% Complete","progressSummaryPercentCompletion":"% Completion","progressSummaryQuizRequirement":"Quiz Requirement","progressSummaryRequirementsMet":"You've met all the requirements.","progressSummaryScoreOf":"Score of","progressSummaryScoreOfPreposition":"% on","progressSummaryStartOver":"Start Over","progressSummaryViewQuiz":"View quiz","progressSummaryYouCompleted":"You completed:","progressSummaryYouScored":"You scored","quizAcceptableResponses":"Acceptable responses","quizAnswerPlaceholder":"Type your answer here","quizContinue":"Continue","quizCorrect":"Correct","quizIncorrect":"Incorrect","quizNext":"NEXT","quizPassing":"PASSING","quizQuestion":"Question","quizRequireAnswer":"Please answer the question to continue","quizRequirePassingScore":"Must pass quiz before continuing","quizRestart":"Restart","quizResults":"Quiz results","quizScore":"Your score","quizStart":"START QUIZ","quizSubmit":"SUBMIT","quizTakeAgain":"TAKE AGAIN","quizTimerElapsed":"Time elapsed","quizTimerExpired":"Time expired","quizTimerExpiredAction":"OK","quizTimerExpiredMessage":"You have reached the time limit for this quiz. Your results will be automatically submitted","quizTimerHide":"Hide","quizTimerLimit":"Time limit","quizTimerMinute":"Minute","quizTimerMinutePlural":"Minutes","quizTimerRemaining":"Time left","quizTimerShow":"Show timer","result":"result","results":"results","salutation":"👋 See you later!","scenarioComplete":"Scenario Complete!","scenarioContinue":"CONTINUE","scenarioStartOver":"START OVER","scenarioTryAgain":"TRY AGAIN","search":"search","seekSliderLabel":"Seek","sortingCardsCorrect":"Cards Correct","sortingLandmark":"Sorting Activity","sortingReplay":"REPLAY","tabGroup":"Tab","codeGroup":"Code","noteGroup":"Note","quoteGroup":"Quote","buttonGroup":"Button","quizLandmark":"Quiz","courseDetails":"DETAILS","feedbackGroup":"Feedback","accordionGroup":"Accordion","statementGroup":"Statement","storylineGroup":"Storyline","attachmentGroup":"File Attachment","embedPhotoGroup":"Embedded photo","embedVideoGroup":"Embedded video","audioPlayerGroup":"Audio player. You can use the space bar to toggle playback and arrow keys to scrub.","buttonStackGroup":"Button stack","textOnImageGroup":"Text on image","timelineLandmark":"Timeline","urlEmbedLandmark":"URL/Embed","videoPlayerGroup":"Video player. You can use the space bar to toggle playback and arrow keys to scrub.","bulletedListGroup":"Bulleted list","checkboxListGroup":"Checkbox list","imageAndTextGroup":"Image and text","imageGalleryGroup":"Image gallery","numberedListGroup":"Numbered list","flashcardBackLabel":"Flashcard back","flashcardGridGroup":"Flashcard grid","nextFlashCardLabel":"Next flashcard","flashcardFrontLabel":"Flashcard front","flashcardStackGroup":"Flashcard stack","knowledgeCheckGroup":"Knowledge check","hamburgerButtonLabel":"Course Overview Sidebar","lessonHeaderLandmark":"Lesson Header","lessonContentLandmark":"Lesson Content","lessonSidebarLandmark":"Lesson Sidebar","labeledGraphicLandmark":"Labeled Graphic","previousFlashCardLabel":"Previous flashcard","timelineCardGroupPrefix":"Timeline Card","labeledGraphicBubbleLabel":"Labeled graphic bubble","labeledGraphicNextMarkerLabel":"Next marker","labeledGraphicPreviousMarkerLabel":"Previous marker"},"deleted":false,"createdAt":"2019-12-16T01:36:28.758Z","updatedAt":"2023-09-20T09:37:57.364Z","iso639Code":"en","transferredAt":null},"fonts":[{"id":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","name":"Montserrat","default":true,"key":"assets/rise/fonts/Montserrat-SemiBold.woff","style":"normal","weight":"600"},{"id":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","name":"Montserrat","default":true,"key":"assets/rise/fonts/Montserrat-Medium.woff","style":"normal","weight":"500"},{"id":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","name":"Montserrat","default":true,"key":"assets/rise/fonts/Montserrat-Black.woff","style":"normal","weight":"900"},{"id":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","name":"Montserrat","default":true,"key":"assets/rise/fonts/Montserrat-Bold.woff","style":"normal","weight":"700"},{"id":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","name":"Montserrat","default":true,"key":"assets/rise/fonts/Montserrat-Italic.woff","style":"italic","weight":"400"},{"id":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","name":"Montserrat","default":true,"key":"assets/rise/fonts/Montserrat-Regular.woff","style":"normal","weight":"400"},{"id":"Lxkz2_hh5Lj36BahL12QIpT8qKsjknf6","name":"Montserrat","default":true,"key":"assets/rise/fonts/Montserrat-Light.woff","style":"normal","weight":"300"},{"id":"-MPEM2R_v3eTh0hQInNv-2WAwVwql-Pw","name":"DM Sans","default":true,"key":"assets/rise/fonts/DMSans-BoldItalic.woff","style":"italic","weight":"700"},{"id":"-MPEM2R_v3eTh0hQInNv-2WAwVwql-Pw","name":"DM Sans","default":true,"key":"assets/rise/fonts/DMSans-Bold.woff","style":"normal","weight":"700"},{"id":"-MPEM2R_v3eTh0hQInNv-2WAwVwql-Pw","name":"DM Sans","default":true,"key":"assets/rise/fonts/DMSans-Italic.woff","style":"italic","weight":"400"},{"id":"-MPEM2R_v3eTh0hQInNv-2WAwVwql-Pw","name":"DM Sans","default":true,"key":"assets/rise/fonts/DMSans-Regular.woff","style":"normal","weight":"400"},{"id":"WcvJTNMavwpiNB2QEnMQPseNDATGXiI9","name":"Oswald","default":true,"key":"assets/rise/fonts/Oswald-Bold.woff","style":"normal","weight":"700"},{"id":"WcvJTNMavwpiNB2QEnMQPseNDATGXiI9","name":"Oswald","default":true,"key":"assets/rise/fonts/Oswald-Regular.woff","style":"normal","weight":"400"},{"id":"WcvJTNMavwpiNB2QEnMQPseNDATGXiI9","name":"Oswald","default":true,"key":"assets/rise/fonts/Oswald-Light.woff","style":"normal","weight":"300"}],"media":[]}")